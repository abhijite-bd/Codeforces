// /*
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ███████████████████████████████████████            ████             ████   ███████   ██████████████████████████████████████████
// ████████████████████████████████████████████████   ████   ███████   ████   ███████   ██████████████████████████████████████████
// ████████████████████████████████████████████████   ████   ███████   ████   ███████   ██████████████████████████████████████████
// ████████████████████████████████████████████████   ████   ███████   ████             ██████████████████████████████████████████
// ███████████████████████████████████████  ███████   ████   ███████   █████████   ███████████████████████████████████████████████
// ███████████████████████████████████████  ███████   ████   ███████   █████████   ███████████████████████████████████████████████
// ███████████████████████████████████████            ████             █████████   ███████████████████████████████████████████████
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ███████████████████████            ████   █████████   ████             ████            ████             ███████████████████████
// ███████████████████████   █████████████   █████████   ████   ███████   ████   █████████████   █████████████████████████████████
// ███████████████████████   █████████████   █████████   ████   ███████   ████   █████████████   █████████████████████████████████
// ███████████████████████            ████               ████             ████           █████            ████████████████████████
// ████████████████████████████████   ████   █████████   ████   ████   ███████   █████████████   █████████████████████████████████
// ████████████████████████████████   ████   █████████   ████   ██████   █████   █████████████   █████████████████████████████████
// ███████████████████████            ████   █████████   ████   ███████   ████            ████             ███████████████████████
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ███████████   █████   ████             ████   ████            ████   ████████   ████      ██████   ████              ██████████
// ███████████   ████   █████   ███████   ████   ████   █████████████   ████████   ████   █   █████   ████   ████████   ██████████
// ███████████   ███   ██████   ███████   ████   ████   █████████████   ████████   ████   ██   ████   ████   ████████   ██████████
// ███████████        ███████             ████   ████            ████              ████   ███   ███   ████              ██████████
// ███████████   ███   ██████   ████   ███████   █████████████   ████   ████████   ████   ████   ██   ████   ████████   ██████████
// ███████████   ████   █████   ██████   █████   █████████████   ████   ████████   ████   █████   █   ████   ████████   ██████████
// ███████████   █████   ████   ███████   ████   ████            ████   ████████   ████   ██████      ████   ████████   ██████████
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// █████              ████             ████   █████████   ████   ████             ████   ████               ████             █████
// █████   ████████   ████   ████████  ████   █████████   ████   ██████████████   ████   ██████████   ██████████   ███████████████
// █████   ████████   ████   ████████  ████   █████████   ████   ██████████████   ████   ██████████   ██████████   ███████████████
// █████              ████             ████               ████   ██████████████   ████   ██████████   ██████████            ██████
// █████   ████████   ████   ████████  ████   █████████   ████   ████   ███████   ████   ██████████   ██████████   ███████████████
// █████   ████████   ████   ████████  ████   █████████   ████   ████   ███████   ████   ██████████   ██████████   ███████████████
// █████   ████████   ████             ████   █████████   ████   ████             ████   ██████████   ██████████             █████
// ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
// */
// #include<bits/stdc++.h>
// #define   ll long long int
// #define   gcd(a,b)   __gcd(a,b)
// #define   lcm(a,b)   (a*b)/gcd(a,b)
// #define   ss ' '
// #define   fast() ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
// #define   max3(a,b,c) max(max(a,b),c)
// #define   min3(a,b,c) min(min(a,b),c)
// #define   pb push_back
// #define   all(v) v.begin(),v.end()
// #define   allr(v) v.rbegin(),v.rend()
// #define   endl '\n'
// #define   pi 3.14159265359
// using namespace std;
// int main()
// {
//   int t, n, i, j, k, l, m;
//     cin >> t;
//     while (t--)
//     {
//         cin >> n >> m;
//         string s[n];
//         for (i = 0; i < n; i++)
//         {
//             cin >> s[i];
//         }
//         int flag = 1;
//         int first = 0;
//         k = 0;
//         l = 0;
//         for (i = 0; i < n; i++)
//         {
//             for (j = 0; j < m; j++)
//             {
//                 if (s[i][j] == 'R')
//                 {
//                     if (!first)
//                     {
//                         first = 1;
//                         l = j;
//                     }
//                     else
//                     {
//                         if (j < l)
//                             flag = 0;
//                     }
//                 }
//             }
//         }
//         if (flag)
//             cout << "YES" << endl;
//         else
//             cout << "NO" << endl;
//     }
// return 0;
// }
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, m, count = 0;
        cin >> n >> m;
        char s[n][m];
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cin >> s[i][j];
                if (s[i][j] == 'R')
                {
                    v.push_back({i, j});
                    count++;
                }
            }
        }

        if (count == 1 || s[0][0] == 'R')
        {
            cout << "YES" << endl;
        }
        else
        {
            for (int i = 1; i < v.size(); i++)
            {
                if ((v[i].second < v[0].second))
                {
                    cout << "NO" << endl;
                    break;
                }
                else
                {
                    cout << "YES" << endl;
                    break;
                }
            }
        }
    }
}